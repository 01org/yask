
// This file contains text for the main page of the API docs generated by Doxygen.
// See http://www.stack.nl/~dimitri/doxygen.
// The 'yask' namespace enables automatic link creation w/o 'yask::' prefixes.

namespace yask {

/** @mainpage
@section oview Overview
This document provides usage information for the YASK stencil compiler
API (application-programmer interface).\n
The API is available for C++ and for Python via SWIG.
Type names are prefixed with 'yc_' to indicate "YASK compiler";
this distinguishes them from the 'yk_'-prefixed types used in the "YASK kernel".
@section usage Typical Usage Model
- Create a 'yc_solution' via yc_factory::new_solution().
- Create one or more grids (`yc_grid` type) via yc_solution::new_grid() as needed by
  the stencil kernel(s) being implemented.
  Calls to new_grid() specify the name and dimensions of each grid.
  Grids may be read-only (constants) or read-write.
  Each grid will be "owned" by the solution from which it was created.
- Create an equation for each read-write grid.
  - Example equation: `u(t+1, x, y, z) EQUALS (u(t, x, y, z) + u(t, x+1, y, z)) / 2`.
  - Create expressions "bottom-up" by creating the leaf nodes first.
  - Leaf nodes may be floating-point (FP) constants or references to grid points.
  - Constants are created via yc_node_factory::new_const_number_node().
  - References to grid points are created via yc_grid::new_relative_grid_point(), which
    specifies the grid indices relative to any point within the grid domain.
  - Create operator nodes via calls to yc_node_factory::new_add_node(), etc., to build up
    larger expressions.
  - To complete each equation, use yc_node_factory::new_equation_node() to specify an expression
    on the right-hand side (RHS) and the grid point that is defined to be equal
    to it on the left-hand side (LHS).
- Specify the solution step dimension via yc_solution::set_step_dim().
  (This is usually "t" for time.)
- Specify the number of bytes in a floating-point element via yc_solution::set_elem_bytes().
  This should be 4 or 8.
- Optionally specify the vector-folding and/or vector-clustering via 
  yc_solution::set_fold_len() and/or yc_solution::set_cluster_mult().
- Format the equations for additional processing via yc_solution::format() or yc_solution::write().

*/

}
